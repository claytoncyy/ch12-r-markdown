pupdata <- readr::read_csv("https://uw-statistics.github.io/Stat311LabAssignments/data/pups_lab2.csv")
View(pupdata)
View(pupdata)
length <- pudata$length
pupdata <- readr::read_csv("https://uw-statistics.github.io/Stat311LabAssignments/data/pups_lab2.csv")
length <- pupdata$length
mean(length)
age <- pupdata$age
mean(age)
sd(length)
sd(age)
cor(length, age)
XY <- (pupage - mean(pupage)) * (puplength - mean(puplength))
XY <- (age - mean(age)) * (length - mean(length))
XX <- (age - mean(age))^2
sum(XY)
sume(XX)
sum(XX)
lm(XX ~ XY)
load("~/.RData")
load("D:/R/RStudio/.RData")
View(reg.new)
View(reg.new)
x <- c(2, 4, 1, 3)
y <- c(8, 5, 8, 7)
sum(x - mean(x))
x - mean(x)
sum((x - mean(x)) * (y - mean(y)))
sum(sqrt((x - mean(x)))
sum(sqrt((x - mean(x)))
sum(sqrt((x - mean(x)))
sqrt((x - mean(x))
?sqrt()
?sqr()
sum((x - mean(x))^2)
lm(x ~ y)
lm(y ~ x)
?lm()
plot(y ~ x)
abline(lm(y ~ x). col = "red")
reg <- lm(y ~ x)
abline(reg, col = "red")
history
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
day <- birthday - today
birthday_intro <- paste(make_introduction(name, age), " In ", day,
" days I'll be ", age + 1, ".",
sep = "\n"
)
return(birthday_intro)
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(
my_name, my_age,
as.Date("04/14/18", "%m/%d/%y")
)
# a2-foundational-skills
# Set up and Defining variables ------------------------------------------------
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
install.packages("stringr")
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 18
# Create a variable `my_name` that is equal to your first name
my_name <- "Yangyu"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 24 * 60
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 365 * 24
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
intro <- paste("Hello, my name is ", name, ", and I'm ", age,
" years old.",
sep = ""
)
return(intro)
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub("Hello, my name is ", "Hey, I'm ", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(number) {
return(2 * number)
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(number) {
return(number^3)
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c(
"Spider-Man: Homecoming", "Iron Man", "3 Idiots", "Pacific Rim",
"Tomb Raider", "The Shawshank Redemption"
)
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, " is a great movie!", sep = "")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- movies[-4]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- 700:999
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- 500:699
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the appropriate function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- Sys.Date()
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date("06/08/18", "%m/%d/%y")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
day <- birthday - today
birthday_intro <- paste(make_introduction(name, age), " In ", day,
" days I'll be ", age + 1, ".",
sep = "\n"
)
return(birthday_intro)
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(
my_name, my_age,
as.Date("04/14/18", "%m/%d/%y")
)
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector_of_string) {
output <- gsub("[0-9]", "", vector_of_string)
return(output)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
success <- remove_digits(c("INFO 201", "CSE 142"))
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(
my_name, my_age,
as.Date("04/14/18", "%m/%d/%y")
)
my_bday_intro
matrix(1:6, nrow = 3, )
matrix(1:6, nrow = 3, byrow = true)
matrix(1:6, nrow = 3, byrow = TRUE)
a <- matrix(1:6, nrow = 3, byrow = TRUE)
colnames(a) <- c("Good", "Bad")
a
rownames(a) <- c(1:3)
a
a(3, Bad)
a[3, Bad]
a[3, 2]
a[3, "Bad"]
mat[1:2, ]
a[1:2, ]
t(a)
drug <- matrix(c(200, 200, 150, 50, 240, 160), nrow = 3, byrow = TRUE)
drug
colnames(drug) <- c(improved, notImproved)
colnames(drug) <- c("improved", "notImproved")
rownames(drug) <- c("D1", "D2", "ST")
drug
barplot(drug)
barplot(drug, legend = TRUE)
barplot(drug, legend = TRUE, beside = TRUE)
t(drug)
t(drug)
barplot(t(drug), legend = TRUE, beside = TRUE)
mosaicplot(drug)
margin.table(drug)
margin.table(drug, margin = 1)
margin.table(drug, margin = 2)
margin.table(drug, margin = 3)
margin.table(drug, margin = 0)
prop.table(drug)
prop.table(drug, margin = 1)
prop.table(drug, margin = 2)
tdrug <- t(drug)
tdrug
drug
margin.table(drug)
margin.table(drug, margin = 2)
margin.table(drug, margin = 1)
prop.table(drug)
prop.table(drug, margin = 2)
prop.table(drug, margin = 1)
240/400
drug <- matrix(c(200, 200, 150, 50, 240, 160), ncol = 2, byrow = TRUE)
colnames(drug) <- c("Improved", "NotImproved")
rownames(drug) <- c("D1", "D2", "ST")
drug
smallDrug <- drug[c(1,3),]
smallDrug.f <- matrix(c(80, 20, 210, 90), ncol = 2, byrow=TRUE)
colnames(smallDrug.f) <- c("Improved", "NotImproved")
rownames(smallDrug.f) <- c("D1", "ST")
smallDrug.f
drug.m <- smallDrug - smallDrug.f
View(drug.m)
prop.table(smallDrug.f, margin - 1)
prop.table(smallDrug.f, margin = 1)
prop.table(drug.m, margin = 1)
prop.table(drug.m, margin = 2)
vic.white <- matrix(c(57, 412, 14,  33), nrow=2, byrow=TRUE) # table for victim=white
vic.black <- matrix(c( 0,  18,  6, 144), nrow=2, byrow=TRUE) # table for victim=black
vic.all <- vic.white + vic.black # combined table
rownames(vic.white) <- rownames(vic.black) <- rownames(vic.all) <- c("White Defendant","Black Defendant")
colnames(vic.white) <- colnames(vic.black) <- colnames(vic.all) <- c("Capital Punishment","Other")
print(vic.all)
prop.table(vic.all, margin = 1)
prop.table(vic.all, margin = 2)
table <- prop.table(vic.all, margin = 2)
table[2, 1] / table[1, 1]
prop.table(vic.all, margin = 1)
print(vic.white)
prop.table(vic.white, margin = 1)
(57 + 14) / (57 + 14 + 412 + 33)
prop.table(vic.black, margin = 1)
print(vic.black)
6 / (18 + 144)
6 / (18 + 144 + 6)
((57 + 14) / (57 + 14 + 412 + 33))/ (6 / (6 + 144 + 18))
prop.table(vic.white, margin = 1)
prop.table(vic.white, margin = 2)
0.1971831 / 0.8028169
prop.table(vic.white, margin = 1)
0.2978723 / 0.1215352
prop.table(vic.black, margin = 1)
0.1015228 /   0.1170431
install.packages('ggmap')
library(ggmap)
qmap("seattle")
qmap("Zhejiang")
qmap("china")
qmap('Wenzhou')
qmap('UW')
qmap('university of washington')
qmap('Yongjia')
qmap('Wenzhou')
qmap('Oubeizhen')
# Create a variable for the API's base URI (https://api.github.com)
base_url <- "https://api.github.com";
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable for the API's base URI (https://api.github.com)
base_url <- "https://api.github.com";
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- "/orgs/info201/repos"
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
full <- paste0(base_url, resource)
response <- GET(full)
# Extract the "text" of the response usin the `content` function
body <- content(response, "text")
# Convert the body from JSON into a data frame
data <- fromJSON(body)
View(data)
View(data)
# How many (public) repositories does the organization have?
print(nrow(info_repos))
# How many (public) repositories does the organization have?
print(nrow(data))
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
query_params <- list(q = "graphics+languange:R")
# Use a "Search" endpoint to search for repositories about "graphics"
# (bonus: limit language to only "R" -- which requires a different syntax)
# (hint: https://developer.github.com/v3/search/#search-repositories)
# Reassign the `resource` variable to refer to the appropriate resource.
resource2 <- "/search/repositories"
<- "/search/repositories"
# Use a "Search" endpoint to search for repositories about "graphics"
# (bonus: limit language to only "R" -- which requires a different syntax)
# (hint: https://developer.github.com/v3/search/#search-repositories)
# Reassign the `resource` variable to refer to the appropriate resource.
resource2 <- "/search/repositories"
# Send a GET request to this endpoint--including your params list as the `query`
response <- GET(paste0(base_url, resource), query = query_params)
# Extract the response body and convert it from JSON.
body <- content(response, "text")
result <- fromJSON(body)
# How many search repos did your search find? (Hint: check the list names)
print(result$total_count)
result <- fromJSON(body)
# Extract the response body and convert it from JSON.
body <- content(response, "text")
View(result)
View(result)
result$colnames
result
is.data.frame(result)
# Use a "Search" endpoint to search for repositories about "graphics"
# (bonus: limit language to only "R" -- which requires a different syntax)
# (hint: https://developer.github.com/v3/search/#search-repositories)
# Reassign the `resource` variable to refer to the appropriate resource.
resource <- "/search/repositories"
resource <- "/search/repositories"
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
query_params <- list(q = "graphics+languange:R")
# Send a GET request to this endpoint--including your params list as the `query`
response <- GET(paste0(base_url, resource), query = query_params)
# Extract the response body and convert it from JSON.
body <- content(response, "text")
result <- fromJSON(body)
# How many search repos did your search find? (Hint: check the list names)
print(result$total_count)
# What are the full names of the
# How many search repos did your search find? (Hint: check the list names)
print(result$total_count)
View(result)
View(result)
resource <- "/search/repositories"
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
query_params <- list(q = "graphics+languange:R")
# Send a GET request to this endpoint--including your params list as the `query`
response <- GET(paste0(base_url, resource), query = query_params)
# Extract the response body and convert it from JSON.
body <- content(response, "text")
result <- fromJSON(body)
# How many search repos did your search find? (Hint: check the list names)
print(result$total_count)
# What are the full names of the top 5 results?
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
query_params <- list(q = "graphics+language:R")
y_params <- list(q = "graphics+language:R")
# Send a GET request to this endpoint--including your params list as the `query`
response <- GET(paste0(base_url, resource), query = query_params)
# Extract the response body and convert it from JSON.
body <- content(response, "text")
result <- fromJSON(body)
# How many search repos did your search find? (Hint: check the list names)
print(result$total_count)
setwd("D:/info201/ch12-r-markdown/exercise-1")
# load relevant libraries
library(httr)
library(jsonlite)
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("../ch11-apis/exercise-2/apikey.R")
# Create a variable `movie.name` that is the name of a movie of your choice.
movie.name <- "Tomb Raider"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie.name` variable as the search query!
base_URL <- "https://api.nytimes.com/svc/movies/v2/"
resource <- "reviews/search.json"
query_params <- list("api-key" = nty_apikey, query = movie.name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(paste0(base_URL, resource), query = query_params)
body <- fromJSON(content(response, "text"))
# What kind of data structure did this produce? A data frame? A list?
class(body)
typeof(body)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
View(body)
names(body)
names(body$results)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(body$results)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
most_recent <- reviews[1, ]
headline <- most_recent$headline
short_summary <- most_recent$summary_short
link <- most_recent$link.url
# Create a list of the three pieces of information from above.
# Print out the list.
info <- list(headline, short_summary, link)
print(info)
source("../ch11-apis/exercise-2/apikey.R")
source("../../ch11-apis/exercise-2/apikey.R")
# load relevant libraries
library(httr)
library(jsonlite)
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("../../ch11-apis/exercise-2/apikey.R")
# Create a variable `movie.name` that is the name of a movie of your choice.
movie.name <- "Tomb Raider"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie.name` variable as the search query!
base_URL <- "https://api.nytimes.com/svc/movies/v2/"
resource <- "reviews/search.json"
query_params <- list("api-key" = nty_apikey, query = movie.name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(paste0(base_URL, resource), query = query_params)
body <- fromJSON(content(response, "text"))
# What kind of data structure did this produce? A data frame? A list?
class(body)
typeof(body)
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
View(body)
names(body)
names(body$results)
# Flatten the movie reviews content into a data structure called `reviews`
reviews <- flatten(body$results)
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
most_recent <- reviews[1, ]
headline <- most_recent$headline
short_summary <- most_recent$summary_short
link <- most_recent$link.url
# Create a list of the three pieces of information from above.
# Print out the list.
info <- list(headline, short_summary, link)
print(info)
source(../../ch11-apis/exercise-2/exercise.R)
source("exercise.R"")
source("exercise.R")
source(exercise.R)
setwd("D:/info201/ch12-r-markdown/exercise-1")
source(exercise.R)
source(exercise.R)
source("exercise.R")
headline
short_summary
View(response)
View(response)
View(reviews)
View(reviews)
